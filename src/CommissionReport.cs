/* Copyright (C) 2019 Interactive Brokers LLC. All rights reserved. This code is subject to the terms
 * and conditions of the IB API Non-Commercial License or the IB API Commercial License, as applicable. */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace IBApi
{
    /**
     * @class CommissionReport
     * @brief class representing the commissions generated by an execution.
     * @sa Execution
     */
    public class CommissionReport
    {
        private string execId;
        private double commission;
        private string currency;
        private double realizedPNL;
        private double yield;
        private int yieldRedemptionDate;

        /**
        * @brief the execution's id this commission belongs to.
        */
        public string ExecId
        {
            get { return execId; }
            set { execId = value; }
        }

        /**
         * @brief the commissions cost.
         */
        public double Commission
        {
            get { return commission; }
            set { commission = value; }
        }

        /**
        * @brief the reporting currency.
        */
        public string Currency
        {
            get { return currency; }
            set { currency = value; }
        }

        /**
        * @brief the realized profit and loss
        */
        public double RealizedPNL
        {
            get { return realizedPNL; }
            set { realizedPNL = value; }
        }

        /**
         * @brief The income return.
         */
        public double Yield
        {
            get { return yield; }
            set { yield = value; }
        }

        /**
         * @brief date expressed in yyyymmdd format.
         */
        public int YieldRedemptionDate
        {
            get { return yieldRedemptionDate; }
            set { yieldRedemptionDate = value; }
        }

        public CommissionReport()
        {
            commission = 0;
            realizedPNL = 0;
            yield = 0;
            yieldRedemptionDate = 0;
        }

        public override bool Equals(Object p_other)
        {
            bool l_bRetVal;
            CommissionReport l_theOther = p_other as CommissionReport;

            if (l_theOther == null)
            {
                l_bRetVal = false;
            }
            else if (this == p_other)
            {
                l_bRetVal = true;
            }
            else
            {
                l_bRetVal = ExecId.Equals(l_theOther.ExecId);
            }
            return l_bRetVal;
        }

        public override int GetHashCode()
        {
            var hashCode = 662669467;
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(ExecId);
            hashCode = hashCode * -1521134295 + Commission.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Currency);
            hashCode = hashCode * -1521134295 + RealizedPNL.GetHashCode();
            hashCode = hashCode * -1521134295 + Yield.GetHashCode();
            hashCode = hashCode * -1521134295 + YieldRedemptionDate.GetHashCode();
            return hashCode;
        }
    }
}
